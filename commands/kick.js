async function kickMember(sock, m) {
    const groupId = m.key.remoteJid;

    // Verificar si es un grupo
    if (!groupId.endsWith('@g.us')) {
        await sock.sendMessage(groupId, { text: '‚ùå Este comando solo funciona en grupos.' });
        return;
    }

    // Manejo de errores al obtener metadata
    let metadata;
    try {
        metadata = await sock.groupMetadata(groupId);
    } catch (err) {
        console.error('‚ùå No se pudo obtener la metadata del grupo:', err?.output?.payload?.message || err.message);
        await sock.sendMessage(groupId, {
            text: '‚ùå No se pudo obtener la informaci√≥n del grupo. Puede que el bot ya no est√© en el grupo o a√∫n est√© sincronizando.'
        }).catch(() => {});
        return;
    }

    const admins = metadata.participants.filter(p =>
        p.admin === 'admin' || p.admin === 'superadmin'
    );

    const sender = m.key.participant || m.key.remoteJid;
    const texto = m.message?.conversation ||
        m.message?.extendedTextMessage?.text || '';

    const botNumber = "56972997993";
    let botJid = null;

    const botInGroup = metadata.participants.find(p => {
        const n = p.id.split('@')[0].split(':')[0];
        return n === botNumber;
    });

    if (botInGroup) {
        botJid = botInGroup.id;
    } else if (sock.user?.id) {
        botJid = sock.user.id.includes('@') ? sock.user.id : `${sock.user.id}@s.whatsapp.net`;
    } else {
        botJid = `${botNumber}@s.whatsapp.net`;
    }

    const isSenderAdmin = admins.some(p => p.id === sender);
    let isBotAdmin = false;

    if (botInGroup) {
        isBotAdmin = botInGroup.admin === 'admin' || botInGroup.admin === 'superadmin';
    }

    if (!isBotAdmin) {
        isBotAdmin = admins.some(p => {
            const adminNum = p.id.split('@')[0].split(':')[0];
            return adminNum === botNumber;
        });
    }

    // DEBUG
    if (texto.includes('debugbot') || texto.includes('debugadmin')) {
        const debugInfo = `
üîç *DIAGN√ìSTICO COMPLETO*

ü§ñ *INFO DEL BOT:*
‚Ä¢ ID detectado: ${botJid}
‚Ä¢ ID real en grupo: ${botInGroup ? botInGroup.id : 'No encontrado'}
‚Ä¢ N√∫mero: ${botNumber}
‚Ä¢ ¬øEst√° en el grupo? ${botInGroup ? '‚úÖ S√ç' : '‚ùå NO'}
${botInGroup ? `‚Ä¢ Status: ${botInGroup.admin || 'member'}` : ''}

üë§ *USUARIO QUE EJECUTA:*
‚Ä¢ ID: ${sender}
‚Ä¢ ¬øEs admin? ${isSenderAdmin ? '‚úÖ S√ç' : '‚ùå NO'}

üìä *ESTAD√çSTICAS DEL GRUPO:*
‚Ä¢ Total participantes: ${metadata.participants.length}
‚Ä¢ Total admins: ${admins.length}

üë• *LISTA COMPLETA DE PARTICIPANTES:*
${metadata.participants.map((p, i) => {
    const n = p.id.split('@')[0].split(':')[0];
    return `${i + 1}. ${n} - ${p.admin || 'member'} ${n === botNumber ? '‚Üê ü§ñ BOT' : ''}`;
}).join('\n')}

üîß *ESTADO ACTUAL:*
${!botInGroup ?
    `‚ùå EL BOT NO EST√Å EN EL GRUPO\n\nüìã PASOS:\n1. Agregar +${botNumber} al grupo\n2. Darle admin inmediatamente\n3. Reiniciar bot: node .` :
    `‚úÖ Bot en el grupo como: ${botInGroup.admin || 'member'}\n${(!botInGroup.admin || botInGroup.admin === 'member') ? '‚ö†Ô∏è FALTA: Dar permisos de admin al bot' : '‚úÖ Bot tiene permisos de admin'}`
}

üîç *DETECCI√ìN:*
‚Ä¢ Bot detectado por: ${botInGroup ? 'B√∫squeda en participantes' : 'M√©todo alternativo'}
‚Ä¢ Admin detectado: ${isBotAdmin ? 'S√ç' : 'NO'}
        `;
        await sock.sendMessage(groupId, { text: debugInfo });
        return;
    }

    if (!isSenderAdmin) {
        await sock.sendMessage(groupId, { text: '‚ùå Solo los administradores pueden usar este comando.' });
        return;
    }

    if (!isBotAdmin) {
        await sock.sendMessage(groupId, {
            text: `‚ö†Ô∏è No puedo expulsar, no soy administrador del grupo.\n\nüîß Usa: .kick debugbot para m√°s detalles.\nüìã Mi ID: ${botJid}`
        });
        return;
    }

    let userToKick = null;

    if (m.message?.extendedTextMessage?.contextInfo?.participant) {
        userToKick = m.message.extendedTextMessage.contextInfo.participant;
    } else if (m.message?.extendedTextMessage?.contextInfo?.mentionedJid?.length > 0) {
        userToKick = m.message.extendedTextMessage.contextInfo.mentionedJid[0];
    } else {
        const match = texto.match(/@(\d+)/);
        if (match) {
            userToKick = `${match[1]}@s.whatsapp.net`;
        }
    }

    if (!userToKick) {
        await sock.sendMessage(groupId, {
            text: '‚ùó Para usar este comando:\n‚Ä¢ Responde a un mensaje del usuario\n‚Ä¢ Menciona al usuario con @\n‚Ä¢ Usa: .kick @usuario'
        });
        return;
    }

    const isTargetAdmin = admins.some(p => p.id === userToKick);
    if (isTargetAdmin) {
        await sock.sendMessage(groupId, {
            text: '‚ùå No puedo expulsar a un administrador del grupo.'
        });
        return;
    }

    const isUserInGroup = metadata.participants.some(p => p.id === userToKick);
    if (!isUserInGroup) {
        await sock.sendMessage(groupId, {
            text: '‚ùå El usuario no est√° en este grupo.'
        });
        return;
    }

    try {
        await sock.groupParticipantsUpdate(groupId, [userToKick], 'remove');
        await sock.sendMessage(groupId, {
            text: `üë¢ Usuario eliminado exitosamente: @${userToKick.split('@')[0]}`,
            mentions: [userToKick]
        });
    } catch (error) {
        console.error('‚ùå Error al expulsar:', error);
        if (error.output?.statusCode === 403) {
            await sock.sendMessage(groupId, {
                text: '‚ùå Sin permisos. El bot debe ser administrador del grupo.'
            });
        } else if (error.output?.statusCode === 400) {
            await sock.sendMessage(groupId, {
                text: '‚ùå Usuario no encontrado o ya no est√° en el grupo.'
            });
        } else {
            await sock.sendMessage(groupId, {
                text: '‚ùå Error al expulsar al usuario. Intenta de nuevo.'
            });
        }
    }
}

module.exports = { kickMember };
